#!/bin/bash
# Attempts to attach ENI to an EC2 instance, the way it attaches is via
# tags in the ENI. If you ENI is in the same availability zone and is "available" and has the same
# stack name tag then you are cool to take the ENI
#
# Policy Statement:
#    {
#        "Effect": "Allow",
#        "Action": [
#            "ec2:AssociateAddress",
#            "ec2:AssignPrivateIpAddresses",
#            "ec2:AttachNetworkInterface",
#            "ec2:CreateNetworkInterface",
#            "ec2:DescribeInstances",
#            "ec2:DescribeNetworkInterfaces",
#            "ec2:DetachNetworkInterface"
#        ],
#        "Resource": [
#            "*"
#        ]
#    }
#
# Uncomment for debugging
#set -x

# TODO: Make use the one provided in nubis-base
# Common functions.
# shellcheck disable=SC1091
[ -e /usr/local/lib/nubis/nubis-lib.sh ] && . /usr/local/lib/nubis/nubis-lib.sh || exit 1

function _get_eni_id {
    # shellcheck disable=SC2128
    if [ -z "$1" ] && [ -z "$2" ]; then echo "Usage: ${FUNCNAME} [region] [stackname]"; return 1; fi

    local availability_zone
    availability_zone=$(get_availability_zone)
    local arena=${NUBIS_ARENA}
    local region=$1

    aws ec2 describe-network-interfaces \
        --region "${region}" \
        --filter \
            "Name=tag-value,Values=nubis-nat-eni-${arena}" \
            "Name=availability-zone,Values=${availability_zone}" \
        --query \
            'NetworkInterfaces[*][NetworkInterfaceId]' \
        --output text
}

# returns vpc_subnet_cidr
function get_vpc_subnet_cidr() {
    # shellcheck disable=SC2128
    if [ -z "$1" ]; then echo "Usage: ${FUNCNAME} [interface]"; return 1; fi

    local interface=$1
    mac_addr=$(__get_mac "${interface}")

    local vpc_subnet_cidr
    vpc_subnet_cidr=$(curl -s -fq --retry 5 "http://169.254.169.254/latest/meta-data/network/interfaces/macs/${mac_addr}/subnet-ipv4-cidr-block")
    echo "${vpc_subnet_cidr}"
}

# Wait for the interface to show up after attaching ENI
function wait_for_interface() {
    # shellcheck disable=SC2128
    if [ -z "$1" ]; then echo "Usage: ${FUNCNAME} [interface]"; return 1; fi

    local interface=$1
    local attempts=0
    mac_interface=$(__get_mac "${interface}")

    until [ ! -z "${mac_interface}" ] || [ "${attempts}" -eq 30 ]; do
        log "Waiting for interface ${interface} to be ready"
        sleep 10
        mac_interface=$(__get_mac "${interface}")
        let attempts++
    done
}

function wait_for_route() {
    # shellcheck disable=SC2128
    if [ -z "$1" ]; then echo "Usage: ${FUNCNAME} [interface]"; return 1; fi

    local interface=$1
    local attempts=0

    route_table=$(/sbin/route | grep default | grep "${interface}")
    until [ ! -z "${route_table}" ] || [ "${attempts}" -eq 30 ]; do
        log "Waiting for route to come up"
        sleep 10
        route_table=$(/sbin/route | grep default | grep "${interface}")
        let attempts++
    done
}

# Remove extra routes, it waits for eni to be ready and route to be ready first
function remove_routes() {
    wait_for_interface eth1
    wait_for_route eth1

    vpc_subnet_cidr=$(get_vpc_subnet_cidr eth0)

    log "Removing default route for eth1"
    /sbin/route del default eth1

    log "Removing ${vpc_subnet_cidr} route from eth0"
    /sbin/route del -net "${vpc_subnet_cidr}" dev eth0
}

function detach_eni() {
    # shellcheck disable=SC2128
    if [ -z "$1" ] ; then echo "Usage: ${FUNCNAME} [eni-id] [attach-id]"; return 1; fi

    local ENI_ID=$1
    local ATTACH_ID
    ATTACH_ID=$(aws --region "${REGION}"  ec2 describe-network-interfaces --network-interface-ids "${ENI_ID}" --query 'NetworkInterfaces[*][Attachment][*][AttachmentId]' --output text)

    if [ ! -z "$ATTACH_ID" ]; then
      log "Detaching ${ENI_ID} ${ATTACH_ID}"
      aws --region "${REGION}" ec2 detach-network-interface --attachment-id "${ATTACH_ID}"

      #XXX: Wait for detachment operation to complete
      local ATTACHED
      ATTACHED=$(aws --region "${REGION}"  ec2 describe-network-interfaces --network-interface-ids "${ENI_ID}" --query 'NetworkInterfaces[*][Attachment][*][AttachmentId]' --output text)

      attempts=0
      while [ ! -z "$ATTACHED" ] || [ "${attempts}" -eq 30 ] ; do
         ATTACHED=$(aws --region "${REGION}"  ec2 describe-network-interfaces --network-interface-ids "${ENI_ID}" --query 'NetworkInterfaces[*][Attachment][*][AttachmentId]' --output text)
         sleep 1
         let attempts++
      done
    fi
}

INSTANCE_ID=$(get_instance_id)
REGION=$(get_region)

# Lets wait for ENI to become ready first
ENI_ID=$(_get_eni_id "${REGION}" "${NUBIS_STACK}")

attempts=0
until [ ! -z "${ENI_ID}" ] || [ "${attempts}" -eq 30 ]; do
    log "Waiting for ENI to become available"
    ENI_ID=$(_get_eni_id "${REGION}" "${NUBIS_STACK}")
    sleep 10
    let attempts++
done

if [[ ! -z "${ENI_ID}" ]]; then

    detach_eni "${ENI_ID}"

    log "Attaching ${ENI_ID} to ${INSTANCE_ID}"
    aws ec2 attach-network-interface --region "${REGION}" --network-interface-id "${ENI_ID}" --instance-id "${INSTANCE_ID}" --device-index 1

    RV=$?
    if [ ${RV} -ne 1 ]; then
        log "Sucesfully attached ${ENI_ID} to ${INSTANCE_ID}"
        remove_routes
    fi
else
    # Assuming if it hits here we do not attach
    log "Unable to attach ${ENI_ID} to ${INSTANCE_ID}"
    exit 1
fi
